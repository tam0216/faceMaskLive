# import needed package
import numpy as np
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.models import load_model
import cv2
import os
import time
import datetime
import imutils
from imutils.video import VideoStream


def faceMaskDetection(frame, faceNet, maskNet):
    # grab the dimensions
    (h, w) = frame.shape[:2]

    # construct a blob
    blob = cv2.dnn.blobFromImage(frame, 1.0, (256, 256),
                                 (104.0, 177.0, 123.0))

    # pass the blob through the network and obtain the face detections
    faceNet.setInput(blob)
    detections = faceNet.forward()
    print(detections.shape)

    # initialize lists of faces
    faces = []
    # initialize lists of locations
    locs = []
    #initialize lists of predictions
    preds = []

    # loop the detections
    for i in range(0, detections.shape[2]):
        # extract the confidence
        confidence = detections[0, 0, i, 2]

        # filter out weak detection(confidence must greater than 0.5(minimum confidence))
        if confidence > 0.5:

            # compute the (x, y)-coordinates
            box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
            (startX, startY, endX, endY) = box.astype("int")

            # ensure the bounding boxes fall within the dimension
            (startX, startY) = (max(0, startX), max(0, startY))
            (endX, endY) = (min(w - 1, endX), min(h - 1, endY))

            # extract the face ROI, convert it from BGR to RGB channel
            # ordering, resize it to 256x256, and preprocess it
            face = frame[startY:endY, startX:endX]
            face = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)
            face = cv2.resize(face, (256, 256))
            face = img_to_array(face)
            face = preprocess_input(face)

            # add data to respectively lists
            faces.append(face)
            locs.append((startX, startY, endX, endY))

    # prediction if only more than one face detected
    if len(faces) > 0:
        # for faster inference we'll make batch predictions on *all*
        # faces at the same time rather than one-by-one predictions
        # in the above `for` loop
        faces = np.array(faces, dtype="float32")
        preds = maskNet.predict(faces, batch_size=32)

    # return a 2-tuple of the face locations and their corresponding
    # locations
    return (locs, preds)


# load our serialized face detector model from disk
prototxtPath = r"C:\Users\user\Desktop\Mask Detection\face_detector\deploy.prototxt"
weightsPath = r"C:\Users\user\Desktop\Mask Detection\face_detector\res10_300x300_ssd_iter_140000.caffemodel"
faceNet = cv2.dnn.readNet(prototxtPath, weightsPath)

# load the face mask detector model from disk
maskNet = load_model(r"C:\Users\user\Desktop\Mask Detection\mask_detector.model")

# Snapshot path
count = 1
snapPath = r"C:\Users\user\Desktop"
# Snapshot time interval
timeF = 90

# initialize the video stream
print("[INFO] starting video stream...")
vs = VideoStream(src=0).start()

# loop over the frames from the video stream
while True:
    # grab the frame from the threaded video stream and resize it
    # to have a maximum width of 400 pixels
    frame = vs.read()
    frame = imutils.resize(frame, width=600)

    # detect faces in the frame and determine if they are wearing a
    # face mask or not
    (locs, preds) = faceMaskDetection(frame, faceNet, maskNet)

    # loop over the detected face locations and their corresponding
    # locations
    for (box, pred) in zip(locs, preds):
        # unpack the bounding box and predictions
        (startX, startY, endX, endY) = box
        (mask, withoutMask) = pred

        # determine the class label and color we'll use to draw
        # the bounding box and text
        if mask > withoutMask:
            label = "Mask"
        else:
            label = "No Mask"

        # Activate this code if you want to screenshot or catch the person
        # who is not wearing mask (every three seconds)
        if label == "Mask":
            print("Mask is weared correctly")
        else:
           if (count % timeF == 0):  # Store operation every timeF frame
                now = datetime.datetime.now()
                cv2.imwrite(os.path.join(snapPath, str(now.month)+"_"+str(now.day)+"_"
                         +str(now.hour)+"_"+str(now.minute)+"_"+str(now.second)
                          +'.jpg'), frame)
                print("Mask is weared incorrectly")

        color = (0, 255, 0) if label == "Mask" else (0, 0, 255)

        # include the probability in the label
        label = "{}: {:.2f}%".format(label, max(mask, withoutMask) * 100)

        # display the label and bounding box rectangle on the output
        # frame
        cv2.putText(frame, label, (startX, startY - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.45, color, 2)
        cv2.rectangle(frame, (startX, startY), (endX, endY), color, 2)

    # show the output frame
    cv2.imshow("Frame", frame)
    key = cv2.waitKey(1) & 0xFF
    count = count + 1
    # if the `q` key was pressed, break from the loop
    if key == ord("q"):
        break

# do a bit of cleanup
cv2.destroyAllWindows()
vs.stop()
